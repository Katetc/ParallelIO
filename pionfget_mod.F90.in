#define _FILE_ "pionfget_mod.F90"
module pionfget_mod
#ifdef TIMING
  use perf_mod, only : t_startf, t_stopf      ! _EXTERNAL
#endif

  use pio_kinds, only: i4,r4,r8,pio_offset
  use pio_types
  use nf_mod, only : check_netcdf
  use pio_support, only : Debug, DebugIO, piodie, CheckMPIReturn
#ifdef _NETCDF
  use netcdf            ! _EXTERNAL
#endif
  implicit none
  private
#ifdef _PNETCDF
#include <pnetcdf.inc>  /*  _EXTERNAL */
#endif
  include 'mpif.h'  ! _EXTERNAL
  public :: get_var

  interface get_var
     module procedure get_var_{DIMS}d_{TYPE}, get_var_vdesc_{DIMS}d_{TYPE}
     !  DIMS 1,2,3
     module procedure get_vara_{DIMS}d_{TYPE}, get_vara_vdesc_{DIMS}d_{TYPE}
     module procedure get_var1_{TYPE}, get_var1_vdesc_{TYPE}
  end interface

 character(len=*), parameter :: modName='pionfget_mod'

CONTAINS

  integer function get_var1_{TYPE} (File,varid, index, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    integer, intent(in) :: varid, index(:)
    {VTYPE}, intent(out) :: ival

    character(len=*), parameter :: subName=modName//'::get_var1_{TYPE}'
    integer :: iotype, mpierr, ilen
#ifdef TIMING
    call t_startf("pio_get_var1_{TYPE}")
#endif
    ierr=0
    iotype = File%iotype 
    if(Debug) print *,_FILE_,__LINE__,index

#if ({ITYPE} == TYPETEXT)
    ilen = len(ival)
    ival(1:ilen) = ' '
#else
    ilen=1
#endif	

    if(File%iosystem%IOProc) then
       select case (iotype) 
#ifdef _PNETCDF
       case(iotype_pnetcdf)
          ierr = nfmpi_begin_indep_data(File%fh)
          ! Only io proc 0 will do reading
          if(ierr==PIO_NOERR .and. File%iosystem%io_rank==0) then
             ierr = nfmpi_get_var1_{TYPE} (File%fh, varid, int(index,kind=PIO_OFFSET), ival)
             if(ierr/=PIO_NOERR) print *, _FILE_,__LINE__,index, ival
          end if
          if(ierr==PIO_NOERR) then
             ierr = nfmpi_end_indep_data(File%fh)
          end if
#endif

#ifdef _NETCDF
       case(iotype_netcdf)
          ! Only io proc 0 will do reading
          if (File%iosystem%io_rank == 0) then
             ierr = nf90_get_var(File%fh, varid, ival, start=index)
             if(ierr/=PIO_NOERR) print *,_FILE_,__LINE__,index, ival
          end if
#endif
       end select
    end if
    call check_netcdf(File,ierr,_FILE_,__LINE__)
#if ({ITYPE} == TYPETEXT)
    ilen = len(ival)
#else
    ilen=1
#endif	

    call MPI_Bcast(ival, ilen, {MPITYPE} , File%iosystem%IOMaster, File%iosystem%Comp_comm, mpierr)
    call CheckMPIReturn(subName, mpierr)

#ifdef TIMING
    call t_stopf("pio_get_var1_{TYPE}")
#endif
  end function get_var1_{TYPE}
  integer function get_var1_vdesc_{TYPE} (File,vdesc, index, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    type(var_desc_t), intent(in) :: vdesc
    integer, intent(in) :: index(:)
    {VTYPE}, intent(out) :: ival

    character(len=*), parameter :: subName=modName//'::get_var1_vdesc_{TYPE}'

    ierr = get_var1_{TYPE} (File, vdesc%varid, index, ival)

  end function get_var1_vdesc_{TYPE}


  ! DIMS 1,2,3
  integer function get_vara_{DIMS}d_{TYPE} (File,varid, start, count, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    integer, intent(in) :: varid, start(:), count(:)
    {VTYPE}, intent(out) :: ival{DIMSTR}

    character(len=*), parameter :: subName=modName//'::get_vara_{DIMS}d_{TYPE}'
    integer :: iotype, isize, mpierr, i

#ifdef TIMING
    call t_startf("pio_get_vara_{DIMS}d_{TYPE}")
#endif
    ierr=0
    iotype = File%iotype 
    isize=1
    do i=1,size(count)
       isize=isize*count(i)
    end do

    if(File%iosystem%IOProc) then
       select case (iotype) 
#ifdef _PNETCDF
       case(iotype_pnetcdf)
          ierr = nfmpi_get_vara_all (File%fh, varid, int(start,kind=PIO_OFFSET), &
               int(count,kind=PIO_OFFSET), ival, isize, {MPITYPE})
#endif
#ifdef _NETCDF
       case(iotype_netcdf)
          ! Only io proc 0 will do reading
          if (File%iosystem%io_rank == 0) then
             ierr = nf90_get_var(File%fh, varid, ival, start=start, count=count)
          end if
#endif
       end select
    end if
    call check_netcdf(File,ierr,_FILE_,__LINE__)
    if(iotype.eq.iotype_netcdf .or. File%iosystem%num_iotasks < File%iosystem%num_tasks) then
       call MPI_Bcast(ival,isize, {MPITYPE} , File%iosystem%IOMaster, File%iosystem%Comp_comm, mpierr)
       call CheckMPIReturn(subName, mpierr)
    end if

#ifdef TIMING
    call t_stopf("pio_get_vara_{DIMS}d_{TYPE}")
#endif
  end function get_vara_{DIMS}d_{TYPE}
  ! DIMS 1,2,3
  integer function get_vara_vdesc_{DIMS}d_{TYPE} (File,vdesc, start, count, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    type(var_desc_t), intent(in) :: vdesc
    integer, intent(in) :: start(:), count(:)
    {VTYPE}, intent(out) :: ival{DIMSTR}

    character(len=*), parameter :: subName=modName//'::get_vara_vdesc_{DIMS}d_{TYPE}'

    ierr = get_vara_{DIMS}d_{TYPE} (File, vdesc%varid, start, count, ival)

  end function get_vara_vdesc_{DIMS}d_{TYPE}

  integer function get_var_{DIMS}d_{TYPE} (File,varid, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    integer, intent(in) :: varid
    {VTYPE}, intent(out) :: ival{DIMSTR}

    character(len=*), parameter :: subName=modName//'::get_var_{DIMS}d_{TYPE}'
    integer :: iotype, mpierr, isize

#ifdef TIMING
    call t_startf("pio_get_var_{DIMS}d_{TYPE}")
#endif
    ierr=0
    iotype = File%iotype 
    isize=1	
#if ({DIMS} > 0)
    isize= size(ival)
#endif
#if ({ITYPE} == TYPETEXT)
    isize = isize*len(ival)	
    ival{DIMSTR} = ' '
#endif

    if(File%iosystem%IOProc) then
       select case (iotype) 
#ifdef _PNETCDF
       case(iotype_pnetcdf)
          ierr = nfmpi_get_var_all(File%fh, varid, ival, isize, {MPITYPE})
#endif
#ifdef _NETCDF
       case(iotype_netcdf)
          ! Only io proc 0 will do reading
          if (File%iosystem%io_rank == 0) then
             ierr = nf90_get_var(File%fh, varid, ival)
          end if
#endif
       end select
    end if
    call check_netcdf(File,ierr,_FILE_,__LINE__)
    if(iotype.eq.iotype_netcdf .or. File%iosystem%num_iotasks < File%iosystem%num_tasks) then
       call MPI_Bcast(ival,isize, {MPITYPE} , File%iosystem%IOMaster, File%iosystem%Comp_comm, mpierr)
       call CheckMPIReturn(subName, mpierr)
    end if
#ifdef TIMING
    call t_stopf("pio_get_var_{DIMS}d_{TYPE}")
#endif
  end function get_var_{DIMS}d_{TYPE}

  integer function get_var_vdesc_{DIMS}d_{TYPE} (File,vdesc, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    type(var_desc_t), intent(in) :: vdesc
    {VTYPE}, intent(out) :: ival{DIMSTR}

    character(len=*), parameter :: subName=modName//'::get_var_vdesc_{DIMS}d_{TYPE}'

    ierr = get_var_{DIMS}d_{TYPE} (File, vdesc%varid, ival)

  end function get_var_vdesc_{DIMS}d_{TYPE}
end module pionfget_mod
