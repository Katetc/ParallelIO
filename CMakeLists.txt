PROJECT(PIO C Fortran CXX)
ENABLE_LANGUAGE(Fortran)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.5)
OPTION(PIO_BUILD_TIMING  "" OFF)
OPTION(PIO_BUILD_TESTS   "" OFF)

#ENABLE_TESTING()
if(PIO_BUILD_TESTS)
  include( CTest )
ENDIF()

IF (USER_CMAKE_MODULE_PATH)
  LIST(APPEND CMAKE_MODULE_PATH ${USER_CMAKE_MODULE_PATH})
ELSE()
  LIST (APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/bin/cmake" "${CMAKE_CURRENT_SOURCE_DIR}")
ENDIF()
include(PIO_Macros OPTIONAL)

find_file( TESTFILE NAMES TryCSizeOf.f90 PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
get_filename_component( TESTFILEPATH ${TESTFILE} PATH)

SET(pio_include_dirs_  ${CMAKE_CURRENT_SOURCE_DIR}/src ${CMAKE_CURRENT_BINARY_DIR}/src)
SET(PIO_LIB_DIR  ${CMAKE_CURRENT_SOURCE_DIR}/src ${CMAKE_CURRENT_BINARY_DIR}/src CACHE STRING "")


TRY_COMPILE(WITH_CSIZEOF ${CMAKE_CURRENT_BINARY_DIR}/tryCompileCSIZEOF 
                        ${TESTFILEPATH}/TryCSizeOf.f90)

IF(${WITH_CSIZEOF} STREQUAL FALSE)
    MESSAGE(STATUS "Fortran compiler does not support c_sizeof function")
    LIST(APPEND bld_PIO_DEFINITIONS -DNO_C_SIZEOF)
endif()


TRY_COMPILE(WITHOUT_MPISERIAL ${CMAKE_CURRENT_BINARY_DIR}/tryCompileMPISERIAL
                            ${TESTFILEPATH}/TryMPISERIAL.f90)

IF(${WITHOUT_MPISERIAL} STREQUAL FALSE)
    MESSAGE("Building PIO with mpi serial stubs library")
    LIST(APPEND bld_PIO_DEFINITIONS  -D_MPISERIAL)
ENDIF()


# Netcdf is required

SET (NETCDF_FIND_COMPONENTS F90)
FIND_PACKAGE(NETCDF)
IF (${NETCDF_FOUND})
  MESSAGE("Building PIO with netcdf support ") 
  LIST(APPEND bld_PIO_DEFINITIONS  -D_NETCDF)
  IF (${WITHOUT_MPISERIAL} AND ${NETCDF4_PARALLEL})
    MESSAGE("Building PIO with netcdf4 parallel support") 
    LIST(APPEND bld_PIO_DEFINITIONS  -D_NETCDF4)
  ENDIF ()
ENDIF ()


# PNetcdf is optional but used by default
OPTION(WITH_PNETCDF "Whether to build with PNetcdf" TRUE)
IF (${WITH_PNETCDF})
  FIND_PACKAGE(Pnetcdf REQUIRED)
ELSE ()
  MESSAGE(WARNING "Warning: Not building with PNetcdf - cannot run all regression tests.")
ENDIF ()


OPTION(PIO_BIG_ENDIAN "Specify that the machine is big endian" test)
IF ("${PIO_BIG_ENDIAN}" STREQUAL "test") 
  INCLUDE(TestBigEndian)
  TestBigEndian(PIO_BIG_ENDIAN_TEST)
  IF(PIO_BIG_ENDIAN_TEST) 
    SET(PIO_BIG_ENDIAN ON  CACHE BOOL "")
  ELSE()
    SET(PIO_BIG_ENDIAN OFF CACHE BOOL "")
  ENDIF()
ELSE()
  SET(PIO_BIG_ENDIAN ${PIO_BIG_ENDIAN} CACHE BOOL "")
ENDIF()                                            


IF (PIO_FILESYSTEM_HINTS STREQUAL "lustre")
  MESSAGE(STATUS "PIO using lustre filesystem hints")
  LIST(APPEND bld_PIO_DEFINITIONS -DPIO_LUSTRE_HINTS)
ELSEIF(PIO_FILESYSTEM_HINTS STREQUAL "gpfs")
  MESSAGE(STATUS "PIO using gpfs filesystem hints")
  LIST(APPEND bld_PIO_DEFINITIONS -DPIO_GPFS_HINTS)
ELSEIF(NOT "${PIO_FILESYSTEM_HINTS}" STREQUAL "")
  MESSAGE(WARNING "${PIO_FILESYSTEM_HINTS} not valid option for PIO_FILESYSTEM_HINTS; use gpfs or lustre.")
ENDIF()

IF(NETCDF_FOUND) 
  LIST(APPEND pio_include_dirs_ ${NETCDF_INCLUDE_DIR})
  LIST(APPEND bld_PIO_DEFINITIONS  -D_NETCDF)
ELSE()
  LIST(APPEND bld_PIO_DEFINITIONS -D_NONETCDF)
ENDIF()
IF(PNETCDF_FOUND)
  LIST(APPEND pio_include_dirs_  "${PNETCDF_INCLUDE_DIR}")
  LIST(APPEND bld_PIO_DEFINITIONS "-D_PNETCDF" "${PNETCDF_CPPDEFS}")
ELSE()
  LIST(APPEND bld_PIO_DEFINITIONS  -D_NOPNETCDF)
ENDIF()


FIND_PACKAGE(MPI)

OPTION(PIO_USE_MPIIO "Enable support for MPI-IO (default auto detect)" ON)
IF (PIO_USE_MPIIO) 
  TRY_COMPILE(MPIIO_SUCCESS ${CMAKE_CURRENT_BINARY_DIR}/tryCompileMPIIO 
                            ${TESTFILEPATH}/TryMPIIO.f90)
  IF (${MPIIO_SUCCESS})
    MESSAGE(STATUS "MPIIO detected and enabled.")
  ELSE()
    MESSAGE(STATUS "MPIIO not detected and therefore disabled.")
    SET(PIO_USE_MPIIO FALSE)
  ENDIF()
ENDIF()
IF (${PIO_USE_MPIIO}) 
  LIST(APPEND bld_PIO_DEFINITIONS -DUSEMPIIO)
ENDIF()


TRY_COMPILE(MPIMOD_SUCCESS ${CMAKE_CURRENT_BINARY_DIR}/tryCompileMPIMod
                             ${TESTFILEPATH}/TryMPIMod.f90)
IF (${MPIMOD_SUCCESS})
    MESSAGE(STATUS "MPI Fortran module detected and enabled.")
ELSE()
    MESSAGE(STATUS "MPI Fortran module not detected and therefore disabled.")
    SET(PIO_USE_MPIMOD FALSE)
    LIST(APPEND bld_PIO_DEFINITIONS  -DNO_MPIMOD)
ENDIF()


if(${PIO_BUILD_TIMING})
  if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/timing)
    SET(bld_PIO_DEFINITIONS ${bld_PIO_DEFINITIONS} -DTIMING )
    ADD_SUBDIRECTORY(timing timing)
    LIST(APPEND pio_include_dirs_  ${CMAKE_CURRENT_BINARY_DIR}/timing)
  endif()
endif()

SET(PIO_DEFINITIONS ${bld_PIO_DEFINITIONS} CACHE STRING "")
ADD_DEFINITIONS(${PIO_DEFINITIONS})
SET(PIO_INCLUDE_DIRS   ${pio_include_dirs_} CACHE STRING "")
INCLUDE_DIRECTORIES(${PIO_INCLUDE_DIRS})

IF( NOT GENF90_PATH) 
  SET (GENF90_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)
ENDIF()

ADD_SUBDIRECTORY(src)

if(${PIO_BUILD_TESTS})
#  ADD_SUBDIRECTORY(examples)
  ADD_SUBDIRECTORY(test)
  ADD_SUBDIRECTORY(unittests)
  if(${PIO_BUILD_TIMING})
    ADD_SUBDIRECTORY(performancetest)
    ADD_SUBDIRECTORY(decomptest)
  endif()
	ADD_SUBDIRECTORY(scripts)
endif()

# Build documentation
find_package(Doxygen)
if(DOXYGEN_FOUND)
  file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/doc")
  configure_file(${CMAKE_SOURCE_DIR}/Doxyfile.rbuild ${CMAKE_BINARY_DIR}/Doxyfile.rbuild.cmake @ONLY)
  add_custom_target(doc
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/customdoxygen.css ${CMAKE_BINARY_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/DoxygenLayout.xml ${CMAKE_BINARY_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/doxygen.sty ${CMAKE_BINARY_DIR}
    COMMAND cat ${CMAKE_SOURCE_DIR}/Doxyfile > ${CMAKE_BINARY_DIR}/Doxyfile.cmake
    COMMAND cat ${CMAKE_BINARY_DIR}/Doxyfile.rbuild.cmake >> ${CMAKE_BINARY_DIR}/Doxyfile.cmake
    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_BINARY_DIR}/Doxyfile.cmake
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Generating API documentation"
  )
endif(DOXYGEN_FOUND)

